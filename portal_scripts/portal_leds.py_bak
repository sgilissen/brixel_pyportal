#!/usr/bin/env python3

import time
from rpi_ws281x import PixelStrip, Color
import argparse
import random

# LED strip configuration:
LED_COUNT = 80        # Number of LED pixels.
LED_PIN = 18          # GPIO pin connected to the pixels (18 uses PWM!).
# LED_PIN = 10        # GPIO pin connected to the pixels (10 uses SPI /dev/spidev0.0).
LED_FREQ_HZ = 800000  # LED signal frequency in hertz (usually 800khz)
LED_DMA = 10          # DMA channel to use for generating signal (try 10)
LED_BRIGHTNESS = 255  # Set to 0 for darkest and 255 for brightest
LED_INVERT = False    # True to invert the signal (when using NPN transistor level shift)

LED_CHANNEL = 0       # set to '1' for GPIOs 13, 19, 41, 45 or 53
PORTAL_COLOR = 0      # 1 for orange, 0 for blue
PORTAL_SPEED = 1     # Speed in ms

if PORTAL_COLOR==1:
    # Orange
    p_colors = [Color(100,25,0), Color(155,50,0), Color(155,75,0), Color(155,100,0), Color(0,0,0)]
else:
    # Blue
    p_colors = [Color(0, 119, 255), Color(0,170,255), Color(51,119,255), Color(153,204,255)]


# Define functions which animate LEDs in various ways.
def color_wipe(strip, color, wait_ms=50):
    """Wipe color across display a pixel at a time."""
    for i in range(strip.numPixels()):
        strip.setPixelColor(i, color)
        strip.show()
        time.sleep(wait_ms / 1000.0)

def portal(strip, led_start_pos):
     cur_color = 0
     second_pos = led_start_pos * 10
     third_pos = led_start_pos * 20
     for pixel in range(strip.numPixels()):
         strip.setPixelColor(pixel+led_start_pos, p_colors[cur_color])
         strip.setPixelColor(pixel+second_pos, p_colors[cur_color])
         strip.setPixelColor(pixel+third_pos, p_colors[cur_color])
         strip.show()
         if cur_color < len(p_colors)-1:
             cur_color += 1
         else:
             cur_color=0
         time.sleep(PORTAL_SPEED / 1000)


# Main program logic follows:
if __name__ == '__main__':
    # Process arguments
    parser = argparse.ArgumentParser()
    parser.add_argument('-c', '--clear', action='store_true', help='clear the display on exit')
    args = parser.parse_args()

    # Create NeoPixel object with appropriate configuration.
    strip = PixelStrip(LED_COUNT, LED_PIN, LED_FREQ_HZ, LED_DMA, LED_INVERT, LED_BRIGHTNESS, LED_CHANNEL)
    # Intialize the library (must be called once before other functions).
    strip.begin()

    print('Press Ctrl-C to quit.')
    if not args.clear:
        print('Use "-c" argument to clear LEDs on exit')

    try:
        # chunks = chunkify(4, LED_COUNT)
        while True:
            for iteration in range(len(p_colors)-1):
                # print(iteration)
                portal(strip, iteration)

    except KeyboardInterrupt:
        if args.clear:
            print('Clearing...')
            # color_wipe(strip, Color(50, 0, 0), 10)
            color_wipe(strip, Color(0, 0, 0), 10)
